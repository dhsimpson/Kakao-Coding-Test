#include <string>
#include <vector>
#include <algorithm>
#include <iostream> 

using namespace std;
struct task{
    long start,end;
};
task preprocess(string line){
    task res;
    
    long h = atoi(line.substr(11,2).c_str());
    long m = atoi(line.substr(14,2).c_str());
    long s = stod(line.substr(17,6).c_str())*1000;
    string t = line.substr(24);
    t.erase(t.length()-1);
    long term = (long)(stod(t)*1000);
    h *= 3600000;
    m *= 60000;
    res.end = h+m+s;
    res.start = res.end - term + 1;
    return res;
}
int solution(vector<string> lines) {
    // 데이터 준비 O(n)
    int answer = 0;
    vector<task> tasks;
    
    for (auto line: lines) tasks.push_back(preprocess(line));
    // 정답 찾기 O(n^2)
    int point = 0;
    answer++;
    int mx = 1;
    long left, right;
    for(int i = 0;i < tasks.size(); i++){
        left = tasks[i].end;
        right = tasks[i].end + 1000 - 1;
        int temp = 0;
        for(int j=i;j<tasks.size();j++){
            if(!(tasks[j].end<left) && !(right<tasks[j].start)) temp++;
        }
        mx = max(mx, temp);
    }
    return mx;
}
