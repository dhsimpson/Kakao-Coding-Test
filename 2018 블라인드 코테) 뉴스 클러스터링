#include <string>
#include <iostream>
#include <map>
#include <algorithm>
#define MULT 65536
using namespace std;

// 교집합 구하기
int Intersection(map<string,int> m1,map<string,int> m2){
    int res=0;
    for(auto it=m1.begin();it!=m1.end();it++){
        string str = it->first;
        int num = it->second;
        if(m2.find(str)!=m2.end()){
            res += min(num, m2[str]);
        }
    }
    return res;
}
// 합집합 구하기
int Union(map<string,int> m1,map<string,int> m2){
    int res=0;
    for(auto it=m1.begin();it!=m1.end();it++){
        string str = it->first;
        int num = it->second;
        if(m2.find(str)!=m2.end()){
            res += max(num, m2[str]);
        }else{// m1 에만 있는 원소일 때
            res += num;
        }
    }
    for(auto it=m2.begin();it!=m2.end();it++){
        string str = it->first;
        if(m1.find(str)==m1.end())res += m2[str];
    }
    return res;
}
int solution(string str1, string str2) {
    int diff = 'a'-'A';
    // 모두 소문자로 만들어줌
    for(int i=0;i<str1.length();i++){if('A'<=str1[i]&&str1[i]<='Z') str1[i]=str1[i]+diff;}
    for(int i=0;i<str2.length();i++){if('A'<=str2[i]&&str2[i]<='Z') str2[i]=str2[i]+diff;}
    map<string,int> m1,m2;
    for(int i=0;i<str1.length()-1;i++){
        string temp = str1.substr(i,2);
        if('a'<=temp[0]&&temp[0]<='z'&&'a'<=temp[1]&&temp[1]<='z'){
            m1[temp]++;
        }
    }
    for(int i=0;i<str2.length()-1;i++){
        string temp = str2.substr(i,2);
        if('a'<=temp[0]&&temp[0]<='z'&&'a'<=temp[1]&&temp[1]<='z'){
            m2[temp]++;
        }
    }
    if(m1.size()==0 && m2.size()==0)return MULT;
    
    int inter = Intersection(m1,m2);
    int uni = Union(m1,m2);
    
    return (inter*MULT)/uni;
}
