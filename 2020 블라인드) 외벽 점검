#include <string>
#include <vector>
#include <algorithm>
#include <iostream>

using namespace std;

int solution(int n, vector<int> weak, vector<int> dist) {
    int answer = -1;
    sort(dist.begin(),dist.end());
    
    for(int i=0; i<weak.size(); i++){
        // weak 을 순환 시킬 때, idx + n을 해줌(i 번째 위치 = 한바퀴 회전 시 i+n 번째 위치 이므로)
        // 원형 구조 순환에 쓰기 좋은 방법일듯
        int temp = weak[0] + n; 
        for(int j=1;j<weak.size();j++){
            weak[j-1] = weak[j];
        }
        weak[weak.size()-1] = temp;
        do{
            int w=0;
            int d=0;
            for(d=0; d<dist.size(); d++){// d를 0명 부터 dist.size()명 까지
                int fin = weak[w] + dist[d];
                while(fin>=weak[w]){
                    w++;
                    // 취약 지점을 다 돌고 첫 번째 칸에 도달했다면 다 검사한 것이므로 종료 
                    if(w==weak.size())break;
                }
                if(w==weak.size())break;
            }
            if(w==weak.size()){
                if(answer==-1 || d+1 < answer) answer = d+1;
            }
        }while(next_permutation(dist.begin(),dist.end()));
    }
    return answer;
}
