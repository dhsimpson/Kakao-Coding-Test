#include <string>
#include <vector>
#define ALP 26
using namespace std;
int cnt = 0;
class Trie {
public:
    bool isEnd = false;
    Trie* child[ALP];
    Trie() {for (int i = 0; i < ALP; i++)child[i] = NULL;}
    ~Trie() {
        for (int i = 0; i < ALP; i++) {if (child[i] != NULL)delete child[i];}
    }
    void insert(const string word,int idx) {
        if (word.length() == idx){isEnd=true; return;}
        int next = word[idx] - 97;
        if (child[next] == NULL) {
            child[next] = new Trie();
            child[next]->insert(word, idx + 1);
        }
        child[next]->insert(word, idx + 1);
    }
    void find(const string word, int idx) {
        if (word.length() == idx) {
            if(!isEnd)return;
            cnt++; return;
        }
        int next = word[idx] - 97;
        if (word[idx] == '?') {
            for (int i = 0; i < ALP; i++) {
                if (child[i] != NULL)  {  child[i]->find(word, idx + 1); }
            }
        }
        else if (child[next] == NULL) {return;}
        else {child[next]->find(word, idx + 1);}
        return;
    }
};
vector<int> solution(vector<string> words, vector<string> queries) {
    vector<int> answer;
    Trie T;
    for (int i = 0; i < words.size(); i++)T.insert(words[i], 0);
    for (int i = 0; i < queries.size(); i++) {
        answer.push_back(0);
        cnt = 0;
        T.find(queries[i], 0);
        answer[i] = cnt;
    }
    return answer;
}
