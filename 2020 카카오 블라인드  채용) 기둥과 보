#include <string>
#include <vector>
#define MAX 110
using namespace std;

bool build[MAX][MAX][2];// 0기둥 1 보
/* 이 문제에서 배울 점 : 경계를 잘 살피자
문제에선 기둥, 보 가 벽을 넘어 설치하는 경우는 없다고 했지만 TC 에선 있었다.(함정?)
그에 대한 예외 처리가 필요하다.(특히나 build 를 미리 MAX * MAX 크기로 지정 했으므로 OOB 문제가 발생해도 에러가 나지 않는다.)
*/

bool build_pillar(int x,int y,int n){
    // 바닥에 설치 -> 무조건 가능
    if(y==0) return true;
    // 공중에 설치 -> 아래에 기둥이 있거나 아래 양옆에 보가 있으면 가능
    if(y-1>=0 && build[x][y-1][0]) return true;
    if(x-1>=0 && build[x-1][y][1]) return true;
    if(build[x][y][1]) return true;
    // 이외의 경우는 불가능
    return false;
}
bool build_beam(int x,int y,int n){
    // 아래에 기둥이 있을 때 -> 무조건 가능
    if(y-1>=0 && build[x][y-1][0]) return true;
    if(y-1>=0 && x+1<=n && build[x+1][y-1][0]) return true;
    // 아래에 기둥이 없을 때 -> 양 옆에 보가 있으면 가능
    if(x-1>=0 && x+1<n && build[x-1][y][1] && build[x+1][y][1]) return true;
    // 아니면 불가능
    return false;
}
bool erase(int n){
    for(int i=0;i<=n;i++){
        for(int j=0;j<=n;j++){
            for(int k=0;k<2;k++){
                if(build[i][j][k]){
                    // 하나라도 설치 불가이면 false를 리턴하도록 함
                    if(k==0 && !build_pillar(i,j,n)) return false;
                    else if(k==1 && !build_beam(i,j,n)) return false;
                }
            }
        }
    }
    // 전부 설치 가능이면 true를 리턴하도록 함
    return true;
}
    
vector<vector<int>> solution(int n, vector<vector<int>> build_frame) {
    vector<vector<int>> answer;
    int x,y,a,b;
    for(auto frame : build_frame){
        x = frame[0]; y = frame[1]; a = frame[2]; b = frame[3];
        // 삭제에 대해
        if(b==0){
            build[x][y][a] = false;
            // 지울 수 없다면
            if(!erase(n))build[x][y][a] = true;
        }// 설치에 대해
        else if(a==0){ // 기둥 설치
            if(build_pillar(x,y,n))build[x][y][0] = true;
        }else if(a==1){ // 보 설치
            if(build_beam(x,y,n))build[x][y][1] = true;
        }
    }
    for(int i=0;i<=n;i++){
        for(int j=0;j<=n;j++){
            for(int k=0;k<2;k++)if(build[i][j][k]) answer.push_back({i,j,k});
        }
    }
    return answer;
}
